{
  "name": "detective-amd",
  "version": "2.1.1",
  "description": "Find all dependencies within a JavaScript file using AMD module syntax",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node test/index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mrjoelkemp/node-detective-amd"
  },
  "keywords": [
    "amd",
    "detective",
    "dependencies"
  ],
  "author": {
    "name": "Joel Kemp",
    "email": "joel@mrjoelkemp.com",
    "url": "http://www.mrjoelkemp.com/"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mrjoelkemp/node-detective-amd/issues"
  },
  "homepage": "https://github.com/mrjoelkemp/node-detective-amd",
  "dependencies": {
    "ast-module-types": "^1.1.1",
    "escodegen": "^1.3.0",
    "node-source-walk": "^1.1.0"
  },
  "readme": "Returns a list of dependencies for a given JavaScript file using\nany of the AMD module syntaxes.\n\n*Inspired by substack/node-detective but built for AMD*\n\n`npm install detective-amd`\n\n### Usage\n\nLet's say we have the following file definitions:\n\n```javascript\n\n// a.js\ndefine(['./b', './c'], function (b, c) {\n  console.log(b, c);\n});\n\n// b.js\ndefine({\n  name: 'foo'\n});\n\n// c.js\ndefine(function () {\n  return 'bar';\n});\n\n```\n\nHere's how you can grab the list of dependencies of `a.js` **synchronously**.\n\n```javascript\nvar getDependencies = require('detective-amd');\n\nvar srca = fs.readFileSync('a.js');\nvar srcb = fs.readFileSync('b.js');\nvar srcc = fs.readFileSync('c.js');\n\n// Pass in the source code as a string\nconsole.log(getDependencies(srca)); // prints ['./b', './c']\nconsole.log(getDependencies(srcb)); // prints []\nconsole.log(getDependencies(srcc)); // prints []\n\n```\n### Notes\n\n**Supports the 4 forms of AMD syntax:**\n\n* \"named\": `define('name', [deps], func)`\n* \"dependency list\": `define([deps], func)`\n* \"factory\": `define(func(require))`\n* \"no dependencies\": `define({})`\n\nAlso supports \"driver script\" syntax:\n\n`require([deps], func)`\n\nAlso handles dynamically loaded dependencies (ex: inner requires).\n\n**Supports driver scripts**\n\nYou can also find the dependencies from a script that has a top-level require (an app initialization/driver/entry-point script):\n\n```javascript\nrequire([\n  './a'\n], function (a) {\n  // My app will get booted up from here\n});\n```\n\n**Expression-based requires**\n\nIf there's a require call that doesn't have a string literal but an expression,\na string (escodegen-generated) representation will be returned.\n\nFor example, if `a.js` was of the \"factory\" form and contained a dynamic module name:\n\n```javascript\n// a.js\n\ndefine(function (require) {\n  // Assume str is some variable that gets set to a string dynamically\n  // var str = ...\n\n  var b = require('./' + str),\n      c = require('./c');\n\n  console.log(b, c);\n});\n```\n\nThe dependency list will be: `[ '\\'./\\' + str', './c' ]`\n\n* Even though that string representation isn't incredibly useful, it's\nstill added to the list to represent/count that dependency\n",
  "readmeFilename": "Readme.md",
  "_id": "detective-amd@2.1.1",
  "_shasum": "026988cca496501d58d640beb24cd63b8002e5fb",
  "_from": "detective-amd@^2.1.1",
  "_resolved": "https://registry.npmjs.org/detective-amd/-/detective-amd-2.1.1.tgz"
}
